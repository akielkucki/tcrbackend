package gg.jte.generated.ondemand;
import java.util.Arrays;
import java.util.List;
import co.jrstudios.models.Project;
public final class JteindexGenerated {
	public static final String JTE_NAME = "index.jte";
	public static final int[] JTE_LINE_INFO = {0,0,1,2,4,4,4,259,259,459,676,676,679,679,679,681,681,681,681,681,681,681,681,684,684,684,684,684,684,684,684,689,689,689,690,690,690,692,692,693,693,693,694,694,698,698,698,701,701,705,759,763,766,767,767,768,768,769,769,769,770,770,770,771,771,771,773,773,774,774,774,774,774,774,775,775,777,777,777,778,780,780,781,781,782,782,782,782,782,782,783,783,784,784,786,786,786,786,787,787,788,1273,1277};
	public static void render(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor, List<Project> projects) {
		jteOutput.writeContent("\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Admin Panel - Projects</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <style>\n        :root {\n            --primary-bg: #ffffff;\n            --secondary-bg: #f8f9fa;\n            --primary-text: #212529;\n            --secondary-text: #6c757d;\n            --accent: #000000;\n            --border: #dee2e6;\n            --hover: #e9ecef;\n            --tag-bg: #f0f0f0;\n            --overlay: rgba(0, 0, 0, 0.5);\n        }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        }\n\n        body {\n            background-color: var(--secondary-bg);\n            color: var(--primary-text);\n            min-height: 100vh;\n            display: flex;\n        }\n\n        .sidebar {\n            width: 250px;\n            background-color: var(--accent);\n            color: white;\n            height: 100vh;\n            position: fixed;\n            left: 0;\n            top: 0;\n            overflow-y: auto;\n            transition: all 0.3s ease;\n        }\n\n        .logo {\n            padding: 25px 20px;\n            font-size: 24px;\n            font-weight: bold;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n        }\n\n        .nav-links {\n            padding: 20px 0;\n        }\n\n        .nav-link {\n            display: flex;\n            align-items: center;\n            padding: 15px 20px;\n            color: rgba(255, 255, 255, 0.7);\n            text-decoration: none;\n            transition: all 0.3s ease;\n        }\n\n        .nav-link i {\n            margin-right: 10px;\n            font-size: 18px;\n        }\n\n        .nav-link.active, .nav-link:hover {\n            background-color: rgba(255, 255, 255, 0.1);\n            color: white;\n        }\n\n        .main-content {\n            flex: 1;\n            margin-left: 250px;\n            padding: 30px;\n            transition: all 0.3s ease;\n        }\n\n        .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 30px;\n        }\n\n        .header h1 {\n            font-size: 28px;\n            font-weight: 600;\n        }\n\n        .search-bar {\n            display: flex;\n            align-items: center;\n            background-color: var(--primary-bg);\n            border-radius: 8px;\n            padding: 10px 15px;\n            border: 1px solid var(--border);\n        }\n\n        .search-bar input {\n            border: none;\n            outline: none;\n            background-color: transparent;\n            font-size: 14px;\n            width: 250px;\n            margin-left: 10px;\n        }\n\n        .btn {\n            background-color: var(--accent);\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 8px;\n            font-size: 14px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            font-weight: 500;\n        }\n\n        .btn i {\n            margin-right: 8px;\n        }\n\n        .btn:hover {\n            opacity: 0.9;\n        }\n\n        .filters {\n            display: flex;\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n\n        .filter {\n            background-color: var(--primary-bg);\n            border: 1px solid var(--border);\n            border-radius: 8px;\n            padding: 10px 15px;\n            font-size: 14px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n        }\n\n        .filter i {\n            margin-right: 8px;\n        }\n\n        .projects-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n            gap: 20px;\n        }\n\n        .project-card {\n            background-color: var(--primary-bg);\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 20px;\n            transition: all 0.3s ease;\n        }\n\n        .project-card:hover {\n            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n            transform: translateY(-5px);\n        }\n\n        .project-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n\n        .project-id {\n            background-color: var(--tag-bg);\n            color: var(--secondary-text);\n            padding: 5px 10px;\n            border-radius: 4px;\n            font-size: 12px;\n            font-weight: 500;\n        }\n\n        .project-title {\n            font-size: 18px;\n            font-weight: 600;\n            margin-bottom: 10px;\n        }\n\n        .project-description {\n            color: var(--secondary-text);\n            font-size: 14px;\n            margin-bottom: 15px;\n            line-height: 1.5;\n        }\n\n        .project-tags {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            margin-bottom: 15px;\n        }\n\n        .tag {\n            background-color: var(--tag-bg);\n            border-radius: 4px;\n            padding: 5px 10px;\n            font-size: 12px;\n            font-weight: 500;\n        }\n\n        .project-location {\n            display: flex;\n            align-items: center;\n            color: var(--secondary-text);\n            font-size: 14px;\n        }\n\n        .project-location i {\n            margin-right: 8px;\n        }\n\n        .project-actions {\n            display: flex;\n            gap: 10px;\n            margin-top: 15px;\n            padding-top: 15px;\n            border-top: 1px solid var(--border);\n        }\n\n        .action-btn {\n            background-color: transparent;\n            border: 1px solid var(--border);\n            border-radius: 6px;\n            padding: 8px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            color: var(--secondary-text);\n        }\n\n        .action-btn:hover {\n            background-color: var(--hover);\n            color: var(--primary-text);\n        }\n\n        ");
		jteOutput.writeContent("\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: var(--overlay);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n\n        .modal-overlay.active {\n            opacity: 1;\n            pointer-events: auto;\n        }\n\n        .modal {\n            background-color: var(--primary-bg);\n            border-radius: 12px;\n            width: 90%;\n            max-width: 600px;\n            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n            transform: translateY(-20px);\n            transition: transform 0.3s ease;\n            max-height: 90vh;\n            overflow-y: auto;\n        }\n\n        .modal-overlay.active .modal {\n            transform: translateY(0);\n        }\n\n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 20px 24px;\n            border-bottom: 1px solid var(--border);\n        }\n\n        .modal-title {\n            font-size: 20px;\n            font-weight: 600;\n        }\n\n        .close-modal {\n            background: none;\n            border: none;\n            cursor: pointer;\n            font-size: 20px;\n            color: var(--secondary-text);\n            transition: color 0.3s ease;\n        }\n\n        .close-modal:hover {\n            color: var(--primary-text);\n        }\n\n        .modal-body {\n            padding: 24px;\n        }\n\n        .form-group {\n            margin-bottom: 20px;\n        }\n\n        .form-label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n            font-size: 14px;\n        }\n\n        .form-control {\n            width: 100%;\n            padding: 12px 14px;\n            border: 1px solid var(--border);\n            border-radius: 8px;\n            font-size: 14px;\n            transition: border-color 0.3s ease;\n        }\n\n        .form-control:focus {\n            outline: none;\n            border-color: var(--accent);\n        }\n\n        .tags-input-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            padding: 8px 12px;\n            border: 1px solid var(--border);\n            border-radius: 8px;\n            cursor: text;\n        }\n\n        .tags-input-container .tag {\n            display: flex;\n            align-items: center;\n            background-color: var(--tag-bg);\n            padding: 5px 8px;\n            border-radius: 4px;\n        }\n\n        .tag-remove {\n            margin-left: 6px;\n            cursor: pointer;\n            font-size: 14px;\n        }\n\n        .tags-input {\n            flex: 1;\n            border: none;\n            outline: none;\n            padding: 5px 0;\n            min-width: 100px;\n        }\n\n        .modal-footer {\n            padding: 20px 24px;\n            border-top: 1px solid var(--border);\n            display: flex;\n            justify-content: flex-end;\n            gap: 12px;\n        }\n\n        .btn-secondary {\n            background-color: var(--secondary-bg);\n            color: var(--primary-text);\n            border: 1px solid var(--border);\n        }\n\n        .btn-secondary:hover {\n            background-color: var(--hover);\n        }\n\n        .auth-section {\n            background-color: var(--secondary-bg);\n            border-radius: 8px;\n            padding: 15px;\n            margin-bottom: 20px;\n        }\n\n        .auth-message {\n            font-size: 13px;\n            color: var(--secondary-text);\n            margin-top: 5px;\n        }\n\n        .token-status {\n            display: inline-block;\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            margin-right: 5px;\n        }\n\n        .token-status.valid {\n            background-color: #28a745;\n        }\n\n        .token-status.invalid {\n            background-color: #dc3545;\n        }\n\n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: var(--primary-bg);\n            color: var(--primary-text);\n            padding: 15px 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            z-index: 1100;\n            transform: translateY(-100px);\n            opacity: 0;\n            transition: all 0.3s ease;\n        }\n\n        .notification.show {\n            transform: translateY(0);\n            opacity: 1;\n        }\n\n        .notification.success {\n            border-left: 4px solid #28a745;\n        }\n\n        .notification.error {\n            border-left: 4px solid #dc3545;\n        }\n\n        ");
		jteOutput.writeContent("\n        .image-upload-container {\n            margin-bottom: 15px;\n        }\n\n        .image-upload-area {\n            border: 2px dashed var(--border);\n            border-radius: 8px;\n            padding: 30px;\n            text-align: center;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .image-upload-area:hover {\n            border-color: var(--accent);\n        }\n\n        .image-upload-area.highlight {\n            border-color: var(--accent);\n            background-color: rgba(0, 0, 0, 0.02);\n        }\n\n        .image-upload-area i {\n            font-size: 24px;\n            color: var(--secondary-text);\n            margin-bottom: 10px;\n        }\n\n        .image-upload-area p {\n            color: var(--secondary-text);\n            font-size: 14px;\n            margin: 0;\n        }\n\n        .image-preview-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .image-preview {\n            position: relative;\n            width: 100px;\n            height: 100px;\n            border-radius: 8px;\n            overflow: hidden;\n            border: 1px solid var(--border);\n        }\n\n        .image-preview img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n\n        .image-remove {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background-color: rgba(0, 0, 0, 0.6);\n            color: white;\n            border-radius: 50%;\n            width: 20px;\n            height: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            font-size: 12px;\n        }\n\n        .upload-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 4px;\n            background-color: var(--accent);\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n        .image-label {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            background-color: rgba(0, 0, 0, 0.7);\n            color: white;\n            padding: 2px 5px;\n            font-size: 10px;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n        }\n\n        .existing-image {\n            border: 1px solid var(--accent);\n        }\n        @media (max-width: 1024px) {\n            .sidebar {\n                width: 80px;\n            }\n\n            .logo {\n                padding: 25px 0;\n                text-align: center;\n                font-size: 16px;\n            }\n\n            .nav-link span {\n                display: none;\n            }\n\n            .nav-link i {\n                margin-right: 0;\n                font-size: 20px;\n            }\n\n            .main-content {\n                margin-left: 80px;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .projects-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .header {\n                flex-direction: column;\n                align-items: flex-start;\n                gap: 15px;\n            }\n\n            .search-bar {\n                width: 100%;\n            }\n\n            .search-bar input {\n                width: 100%;\n            }\n\n            .filters {\n                overflow-x: auto;\n                width: 100%;\n                padding-bottom: 10px;\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"sidebar\">\n    <div class=\"logo\">AdminPanel</div>\n    <div class=\"nav-links\">\n        <a href=\"#\" class=\"nav-link active\">\n            <i class=\"fas fa-th-large\"></i>\n            <span>Dashboard</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-project-diagram\"></i>\n            <span>Projects</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-tasks\"></i>\n            <span>Tasks</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-users\"></i>\n            <span>Team</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-calendar\"></i>\n            <span>Calendar</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-chart-bar\"></i>\n            <span>Reports</span>\n        </a>\n        <a href=\"#\" class=\"nav-link\">\n            <i class=\"fas fa-cog\"></i>\n            <span>Settings</span>\n        </a>\n    </div>\n</div>\n\n<main class=\"main-content\">\n    <div class=\"header\">\n        <h1>Projects</h1>\n        <div class=\"controls\">\n            <div class=\"search-bar\">\n                <i class=\"fas fa-search\"></i>\n                <input type=\"text\" placeholder=\"Search projects...\">\n            </div>\n        </div>\n    </div>\n\n    <div class=\"filters\">\n        <button class=\"filter\">\n            <i class=\"fas fa-filter\"></i>\n            All Projects\n        </button>\n        <button class=\"filter\">\n            <i class=\"fas fa-map-marker-alt\"></i>\n            Location\n        </button>\n        <button class=\"filter\">\n            <i class=\"fas fa-tags\"></i>\n            Tags\n        </button>\n        <button class=\"btn\" id=\"newProjectBtn\">\n            <i class=\"fas fa-plus\"></i>\n            New Project\n        </button>\n    </div>\n\n    <div class=\"projects-grid\">\n        ");
		for (Project project : projects) {
			jteOutput.writeContent("\n            <div class=\"project-card\">\n                <div class=\"project-header\">\n                    <div class=\"project-id\">#");
			jteOutput.setContext("div", null);
			jteOutput.writeUserContent(project.getId());
			jteOutput.writeContent("</div>\n                    <div class=\"project-actions\">\n                        <button class=\"action-btn edit-btn\"");
			if (gg.jte.runtime.TemplateUtils.isAttributeRendered(project.getId())) {
				jteOutput.writeContent(" data-project-id=\"");
				jteOutput.setContext("button", "data-project-id");
				jteOutput.writeUserContent(project.getId());
				jteOutput.setContext("button", null);
				jteOutput.writeContent("\"");
			}
			jteOutput.writeContent(">\n                            <i class=\"fas fa-pencil-alt\"></i>\n                        </button>\n                        <button class=\"action-btn delete-btn\"");
			if (gg.jte.runtime.TemplateUtils.isAttributeRendered(project.getId())) {
				jteOutput.writeContent(" data-project-id=\"");
				jteOutput.setContext("button", "data-project-id");
				jteOutput.writeUserContent(project.getId());
				jteOutput.setContext("button", null);
				jteOutput.writeContent("\"");
			}
			jteOutput.writeContent(">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </div>\n                <h3 class=\"project-title\">");
			jteOutput.setContext("h3", null);
			jteOutput.writeUserContent(project.getTitle());
			jteOutput.writeContent("</h3>\n                <p class=\"project-description\">");
			jteOutput.setContext("p", null);
			jteOutput.writeUserContent(project.getDescription());
			jteOutput.writeContent("</p>\n                <div class=\"project-tags\">\n                    ");
			for (int i = 0; i < Arrays.stream(project.getTags()).toList().size(); i++) {
				jteOutput.writeContent("\n                        <span class=\"tag\">");
				jteOutput.setContext("span", null);
				jteOutput.writeUserContent(Arrays.stream(project.getTags()).toList().get(i));
				jteOutput.writeContent("</span>\n                    ");
			}
			jteOutput.writeContent("\n                </div>\n                <div class=\"project-location\">\n                    <i class=\"fas fa-map-marker-alt\"></i>\n                    ");
			jteOutput.setContext("div", null);
			jteOutput.writeUserContent(project.getLocation());
			jteOutput.writeContent("\n                </div>\n            </div>\n        ");
		}
		jteOutput.writeContent("\n    </div>\n</main>\n\n");
		jteOutput.writeContent("\n<div class=\"modal-overlay\" id=\"editProjectModal\">\n    <div class=\"modal\">\n        <div class=\"modal-header\">\n            <h3 class=\"modal-title\">Edit Project</h3>\n            <button class=\"close-modal\" id=\"closeModal\">&times;</button>\n        </div>\n        <form id=\"editProjectForm\" enctype=\"multipart/form-data\">\n            <input type=\"hidden\" id=\"projectId\" name=\"id\">\n            <div class=\"modal-body\">\n\n                <div class=\"form-group\">\n                    <label for=\"projectTitle\" class=\"form-label\">Project Title</label>\n                    <input type=\"text\" id=\"projectTitle\" name=\"title\" class=\"form-control\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"projectDescription\" class=\"form-label\">Description</label>\n                    <textarea id=\"projectDescription\" name=\"description\" class=\"form-control\" rows=\"3\" required></textarea>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label\">Tags</label>\n                    <div class=\"tags-input-container\" id=\"tagsContainer\">\n                        <input type=\"text\" class=\"tags-input\" id=\"tagsInput\" placeholder=\"Add a tag...\">\n                    </div>\n                    <input type=\"hidden\" id=\"tagsHidden\" name=\"tags\">\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"form-label\">Project Images</label>\n                    <div class=\"image-upload-container\">\n                        <div class=\"image-upload-area\" id=\"imageDropArea\">\n                            <i class=\"fas fa-cloud-upload-alt\"></i>\n                            <p>Drag & drop images here or click to browse</p>\n                            <input type=\"file\" id=\"imageUpload\" name=\"image\" multiple accept=\"image/*\" class=\"file-input\" hidden>\n                        </div>\n                        <div class=\"image-preview-container\" id=\"imagePreviewContainer\"></div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"projectLocation\" class=\"form-label\">Location</label>\n                    <select id=\"projectLocation\" name=\"location\" class=\"form-control\">\n                        <option value=\"On site\">On site</option>\n                        <option value=\"Remote\">Remote</option>\n                        <option value=\"Hybrid\">Hybrid</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" id=\"cancelEdit\">Cancel</button>\n                <button type=\"button\" class=\"btn\" id=\"saveChangesBtn\">Save Changes</button>\n            </div>\n        </form>\n    </div>\n</div>\n\n");
		jteOutput.writeContent("\n<div class=\"notification\" id=\"notification\"></div>\n\n<script>\n    ");
		jteOutput.writeContent("\n    // Project data from server for JavaScript access\n    const projectsData = [\n            ");
		jteOutput.writeContent("\n            ");
		for (int i = 0; i < projects.size(); i++) {
			jteOutput.writeContent("\n            ");
			jteOutput.writeContent("{");
			jteOutput.writeContent("\n            id: ");
			jteOutput.setContext("script", null);
			jteOutput.writeUserContent(projects.get(i).getId());
			jteOutput.writeContent(",\n            title: \"");
			jteOutput.setContext("script", null);
			jteOutput.writeUserContent(projects.get(i).getTitle());
			jteOutput.writeContent("\",\n            description: \"");
			jteOutput.setContext("script", null);
			jteOutput.writeUserContent(projects.get(i).getDescription());
			jteOutput.writeContent("\",\n            tags: [\n                ");
			for (int j = 0; j < Arrays.stream(projects.get(i).getTags()).toList().size(); j++) {
				jteOutput.writeContent("\n                \"");
				jteOutput.setContext("script", null);
				jteOutput.writeUserContent(Arrays.stream(projects.get(i).getTags()).toList().get(j));
				jteOutput.writeContent("\"");
				jteOutput.setContext("script", null);
				jteOutput.writeUserContent(j < Arrays.stream(projects.get(i).getTags()).toList().size() - 1 ? "," : "");
				jteOutput.writeContent("\n                ");
			}
			jteOutput.writeContent("\n            ],\n            location: \"");
			jteOutput.setContext("script", null);
			jteOutput.writeUserContent(projects.get(i).getLocation());
			jteOutput.writeContent("\",\n            ");
			jteOutput.writeContent("\n            imagePaths: [\n                ");
			if (projects.get(i).getImagePaths() != null) {
				jteOutput.writeContent("\n                ");
				for (int k = 0; k < projects.get(i).getImagePaths().length; k++) {
					jteOutput.writeContent("\n                \"");
					jteOutput.setContext("script", null);
					jteOutput.writeUserContent(projects.get(i).getImagePaths()[k]);
					jteOutput.writeContent("\"");
					jteOutput.setContext("script", null);
					jteOutput.writeUserContent(k < projects.get(i).getImagePaths().length - 1 ? "," : "");
					jteOutput.writeContent("\n                ");
				}
				jteOutput.writeContent("\n                ");
			}
			jteOutput.writeContent("\n            ]\n            ");
			jteOutput.writeContent("}");
			jteOutput.setContext("script", null);
			jteOutput.writeUserContent(i < projects.size() - 1 ? "," : "");
			jteOutput.writeContent("\n        ");
		}
		jteOutput.writeContent("\n        ");
		jteOutput.writeContent("\n    ];\n\n    // DOM Elements\n    const editModal = document.getElementById('editProjectModal');\n    const closeModalBtn = document.getElementById('closeModal');\n    const cancelEditBtn = document.getElementById('cancelEdit');\n    const editProjectForm = document.getElementById('editProjectForm');\n    const projectIdInput = document.getElementById('projectId');\n    const projectTitleInput = document.getElementById('projectTitle');\n    const projectDescriptionInput = document.getElementById('projectDescription');\n    const projectLocationInput = document.getElementById('projectLocation');\n    const tagsContainer = document.getElementById('tagsContainer');\n    const tagsInput = document.getElementById('tagsInput');\n    const tagsHiddenInput = document.getElementById('tagsHidden');\n    const imageDropArea = document.getElementById('imageDropArea');\n    const imageUpload = document.getElementById('imageUpload');\n    const imagePreviewContainer = document.getElementById('imagePreviewContainer');\n    const editButtons = document.querySelectorAll('.edit-btn');\n    const deleteButtons = document.querySelectorAll('.delete-btn');\n    const newProjectBtn = document.getElementById('newProjectBtn');\n    const saveChangesBtn = document.getElementById('saveChangesBtn');\n    const notification = document.getElementById('notification');\n\n    // Keep track of selected files\n    let selectedFiles = [];\n    // Current tags array\n    let currentTags = [];\n    // Track existing images\n    let existingImages = [];\n\n    // Check if token is in localStorage and populate field\n    document.addEventListener('DOMContentLoaded', function() {\n        // Initialize image upload\n        initImageUpload();\n\n        // Tags input handling\n        tagsInput.addEventListener('keydown', function(e) {\n            if (e.key === 'Enter' || e.key === ',') {\n                e.preventDefault();\n                addTag(this.value);\n            }\n        });\n\n        tagsInput.addEventListener('blur', function() {\n            if (this.value.trim()) {\n                addTag(this.value);\n            }\n        });\n\n        // Event delegation for tag removal\n        tagsContainer.addEventListener('click', function(e) {\n            if (e.target.classList.contains('tag-remove')) {\n                const tagToRemove = e.target.getAttribute('data-tag');\n                removeTag(tagToRemove);\n            }\n        });\n    });\n\n    // Initialize image upload functionality\n    function initImageUpload() {\n        // Trigger file input when clicking on the drop area\n        imageDropArea.addEventListener('click', () => {\n            imageUpload.click();\n        });\n\n        // Handle file selection\n        imageUpload.addEventListener('change', handleFiles);\n\n        // Handle drag and drop events\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            imageDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n\n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        // Add highlighting while dragging\n        ['dragenter', 'dragover'].forEach(eventName => {\n            imageDropArea.addEventListener(eventName, highlight, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            imageDropArea.addEventListener(eventName, unhighlight, false);\n        });\n\n        function highlight() {\n            imageDropArea.classList.add('highlight');\n        }\n\n        function unhighlight() {\n            imageDropArea.classList.remove('highlight');\n        }\n\n        // Handle dropped files\n        imageDropArea.addEventListener('drop', (e) => {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            handleFiles({ target: { files } });\n        });\n    }\n\n    // Handle the selected files\n    function handleFiles(e) {\n        const files = Array.from(e.target.files);\n        files.forEach(file => {\n            // Check if it's an image\n            if (!file.type.match('image.*')) {\n                showNotification('Only image files are allowed', 'error');\n                return;\n            }\n\n            // Check file size (limit to 5MB)\n            if (file.size > 5 * 1024 * 1024) {\n                showNotification('Image size should be less than 5MB', 'error');\n                return;\n            }\n\n            // Add to selected files array\n            selectedFiles.push(file);\n\n            // Create a preview\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                addImagePreview(e.target.result, selectedFiles.length - 1);\n            };\n            reader.readAsDataURL(file);\n        });\n    }\n\n    // Add image preview for new uploads\n    function addImagePreview(src, index) {\n        const previewElement = document.createElement('div');\n        previewElement.className = 'image-preview';\n        previewElement.innerHTML = `\n            <img src=\"${src}\" alt=\"Preview\">\n            <div class=\"image-remove\" data-index=\"${index}\">&times;</div>\n            <div class=\"upload-progress\"></div>\n        `;\n\n        // Add remove functionality\n        const removeBtn = previewElement.querySelector('.image-remove');\n        removeBtn.addEventListener('click', () => {\n            // Remove from selectedFiles array\n            selectedFiles.splice(index, 1);\n\n            // Remove preview element\n            previewElement.remove();\n\n            // Re-index the remaining preview elements\n            const removeBtns = document.querySelectorAll('.image-remove');\n            removeBtns.forEach((btn, i) => {\n                btn.setAttribute('data-index', i);\n            });\n        });\n\n        imagePreviewContainer.appendChild(previewElement);\n    }\n\n    // Add preview for existing images\n    function addExistingImagePreview(path, fileName, index) {\n        // Create a preview element with placeholder or actual image\n        const previewElement = document.createElement('div');\n        previewElement.className = 'image-preview existing-image';\n\n        // Create image URL - we'll use a placeholder or actual image path depending on how they're served\n        // If images are served from a public directory, you can use the actual path\n        // Otherwise, use a placeholder image\n        const imageUrl = `/uploads/${fileName}`; // Adjust based on your server setup\n        let isImage = false;\n        fetch(imageUrl, { method: 'GET' })\n            .then(response => {\n                // Check the Content-Type header\n                const contentType = response.headers.get('content-type');\n                if (!contentType || !contentType.startsWith('image/')) {\n                    isImage = false;\n                    throw new Error('Response is not an image');\n                }\n                // If it is an image, convert it to a Blob (or process as needed)\n                return response.blob();\n            })\n            .then(blob => {\n                // Use the image blob (e.g., create an object URL)\n                const imageObjectUrl = URL.createObjectURL(blob);\n                console.log(\"Image loaded:\", imageObjectUrl);\n                isImage = true;\n                // Do something with the image\n            })\n            .catch(error => {\n                console.error(\"Error:\", error.message);\n                // Handle the case when the response is not an image\n            });\n\n\n\n        const cacheUrl = `/images/${fileName}`; // Adjust based on your server setup\n\n        previewElement.innerHTML = `\n    <img src=\"${isImage ? imageUrl : cacheUrl}\" alt=\"${fileName}\" onerror=\"this.src='/uploads/404.png'\">\n    <div class=\"image-label\" title=\"${fileName}\">\n        ${fileName.length > 10 ? fileName.substring(0, 10) + '...' : fileName}\n    </div>\n    <div class=\"image-remove existing-remove\" data-index=\"${index}\">&times;</div>\n`;\n\n        // Add remove functionality\n        const removeBtn = previewElement.querySelector('.existing-remove');\n        removeBtn.addEventListener('click', () => {\n            // Remove from the existingImages array\n            existingImages.splice(index, 1);\n\n            // Remove preview element\n            previewElement.remove();\n\n            // Re-index the remaining preview elements\n            const removeBtns = document.querySelectorAll('.existing-remove');\n            removeBtns.forEach((btn, i) => {\n                btn.setAttribute('data-index', i);\n            });\n        });\n\n        imagePreviewContainer.appendChild(previewElement);\n    }\n\n    // Clear all images\n    function clearImages() {\n        selectedFiles = [];\n        existingImages = [];\n        imagePreviewContainer.innerHTML = '';\n        // Reset the file input\n        imageUpload.value = '';\n    }\n\n    // Render tags function\n    function renderTags() {\n        // Clear existing tags (except input)\n        const tagElements = tagsContainer.querySelectorAll('.tag');\n        tagElements.forEach(tag => tag.remove());\n\n        // Add each tag\n        currentTags.forEach(tag => {\n            const tagElement = document.createElement('span');\n            tagElement.classList.add('tag');\n            tagElement.innerHTML = `${tag} <span class=\"tag-remove\" data-tag=\"${tag}\">&times;</span>`;\n            tagsContainer.insertBefore(tagElement, tagsInput);\n        });\n\n        // Update hidden input value\n        tagsHiddenInput.value = JSON.stringify(currentTags);\n    }\n\n    // Add tag function\n    function addTag(tag) {\n        tag = tag.trim();\n        if (tag && !currentTags.includes(tag)) {\n            currentTags.push(tag);\n            renderTags();\n            tagsInput.value = '';\n        }\n    }\n\n    // Remove tag function\n    function removeTag(tag) {\n        currentTags = currentTags.filter(t => t !== tag);\n        renderTags();\n    }\n\n    // Open modal function\n    function openModal(projectId) {\n        const project = projectsData.find(p => p.id == projectId);\n\n        if (project) {\n            // Clear the form first\n            editProjectForm.reset();\n\n            // Populate form fields\n            projectIdInput.value = project.id;\n            projectTitleInput.value = project.title;\n            projectDescriptionInput.value = project.description;\n            projectLocationInput.value = project.location;\n\n            // Reset and populate tags\n            currentTags = [...project.tags];\n            renderTags();\n\n            // Clear previous images\n            clearImages();\n\n            // Reset existing images array\n            existingImages = [];\n\n            // Load existing images if available\n            if (project.imagePaths && project.imagePaths.length > 0) {\n                // Add existing images to the preview\n                project.imagePaths.forEach((path, index) => {\n                    if (path && path.trim() !== '') {\n                        // Extract file name from path for display\n                        const fileName = path.split('/').pop();\n\n                        // Add to tracking array\n                        existingImages.push({\n                            path: path,\n                            fileName: fileName\n                        });\n\n                        // Display in the preview area\n                        addExistingImagePreview(path, fileName, index);\n                    }\n                });\n            }\n\n            // Show modal\n            editModal.classList.add('active');\n        }\n    }\n\n    // Open modal for new project\n    function openNewProjectModal() {\n        // Clear the form\n        editProjectForm.reset();\n\n        // Reset hidden id field\n        projectIdInput.value = '';\n\n        // Default location value\n        projectLocationInput.value = 'On site';\n\n        // Reset tags\n        currentTags = [];\n        renderTags();\n\n        // Clear images\n        clearImages();\n\n        // Show modal\n        editModal.classList.add('active');\n    }\n\n    // Close modal function\n    function closeModal() {\n        editModal.classList.remove('active');\n    }\n\n    // Save changes button handler\n    saveChangesBtn.addEventListener('click', function() {\n        // Get token from localStorage\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            showNotification('Authentication token not found. Please log in again.', 'error');\n            return;\n        }\n\n        // Create FormData object\n        const formData = new FormData();\n\n        // Add basic form fields\n        formData.append('id', projectIdInput.value);\n        formData.append('title', projectTitleInput.value);\n        formData.append('description', projectDescriptionInput.value);\n        formData.append('location', projectLocationInput.value);\n        formData.append('tags', tagsHiddenInput.value);\n\n        // Add existing image paths that weren't removed\n        if (existingImages.length > 0) {\n            formData.append('existingImages', JSON.stringify(existingImages.map(img => img.path)));\n        }\n\n        // Add new image files\n        selectedFiles.forEach(file => {\n            formData.append('image', file);\n        });\n\n        // Determine if this is a new project or update\n        const isNewProject = !projectIdInput.value;\n        const url = isNewProject ? '/api/projects' : '/api/projects';\n        const method = isNewProject ? 'POST' : 'PUT';\n\n        // Send data to server\n        fetch(url, {\n            method: method,\n            headers: {\n                'Authorization': `Bearer ${token}`\n            },\n            body: formData\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                showNotification(`Project ${isNewProject ? 'created' : 'updated'} successfully`, 'success');\n                closeModal();\n\n                // Refresh the page to show updated data\n                setTimeout(() => {\n                    window.location.reload();\n                }, 1000);\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                showNotification(`Error: ${error.message}`, 'error');\n            });\n    });\n\n    // Show notification\n    function showNotification(message, type) {\n        notification.textContent = message;\n        notification.className = `notification ${type} show`;\n\n        setTimeout(() => {\n            notification.className = 'notification';\n        }, 3000);\n    }\n\n    // Event Listeners\n    editButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            const projectId = this.getAttribute('data-project-id');\n            openModal(projectId);\n        });\n    });\n\n    deleteButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            const projectId = this.getAttribute('data-project-id');\n            deleteProject(projectId);\n        });\n    });\n\n    newProjectBtn.addEventListener('click', function(e) {\n        e.preventDefault();\n        openNewProjectModal();\n    });\n\n    closeModalBtn.addEventListener('click', closeModal);\n    cancelEditBtn.addEventListener('click', closeModal);\n\n    // Close modal when clicking outside\n    editModal.addEventListener('click', function(e) {\n        if (e.target === editModal) {\n            closeModal();\n        }\n    });\n\n    // Delete project function\n    function deleteProject(projectId) {\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            showNotification('Authentication token not found. Please log in again.', 'error');\n            return;\n        }\n\n        if (confirm('Are you sure you want to delete this project?')) {\n            fetch(`/api/projects/${projectId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    showNotification('Project deleted successfully', 'success');\n\n                    // Refresh the page to show updated data\n                    setTimeout(() => {\n                        window.location.reload();\n                    }, 1000);\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                    showNotification(`Error: ${error.message}`, 'error');\n                });\n        }\n    }\n    ");
		jteOutput.writeContent("\n</script>\n</body>\n</html>\n");
	}
	public static void renderMap(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor, java.util.Map<String, Object> params) {
		List<Project> projects = (List<Project>)params.get("projects");
		render(jteOutput, jteHtmlInterceptor, projects);
	}
}
